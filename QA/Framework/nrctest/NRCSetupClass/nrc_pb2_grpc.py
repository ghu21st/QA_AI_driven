# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import nrc_pb2 as nrc__pb2


class NRCStub(object):
    """Streaming grammar-based recognition service API.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Recognize = channel.stream_stream(
                '/nuance.nrc.v1.NRC/Recognize',
                request_serializer=nrc__pb2.RecognitionRequest.SerializeToString,
                response_deserializer=nrc__pb2.RecognitionResponse.FromString,
                )
        self.DTMFRecognize = channel.stream_stream(
                '/nuance.nrc.v1.NRC/DTMFRecognize',
                request_serializer=nrc__pb2.DTMFRecognitionRequest.SerializeToString,
                response_deserializer=nrc__pb2.RecognitionResponse.FromString,
                )


class NRCServicer(object):
    """Streaming grammar-based recognition service API.
    """

    def Recognize(self, request_iterator, context):
        """Performs speech recognition.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DTMFRecognize(self, request_iterator, context):
        """Performs DTMF recognition.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NRCServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Recognize': grpc.stream_stream_rpc_method_handler(
                    servicer.Recognize,
                    request_deserializer=nrc__pb2.RecognitionRequest.FromString,
                    response_serializer=nrc__pb2.RecognitionResponse.SerializeToString,
            ),
            'DTMFRecognize': grpc.stream_stream_rpc_method_handler(
                    servicer.DTMFRecognize,
                    request_deserializer=nrc__pb2.DTMFRecognitionRequest.FromString,
                    response_serializer=nrc__pb2.RecognitionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nuance.nrc.v1.NRC', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NRC(object):
    """Streaming grammar-based recognition service API.
    """

    @staticmethod
    def Recognize(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/nuance.nrc.v1.NRC/Recognize',
            nrc__pb2.RecognitionRequest.SerializeToString,
            nrc__pb2.RecognitionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DTMFRecognize(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/nuance.nrc.v1.NRC/DTMFRecognize',
            nrc__pb2.DTMFRecognitionRequest.SerializeToString,
            nrc__pb2.RecognitionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
